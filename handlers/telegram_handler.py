"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤"""
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from forex_python.converter import CurrencyRates

from config import API_KEY, STEAM_PARTNER, STEAM_TOKEN
from models.skin_purchaser import SkinPurchaser
from utils.logger import setup_logger

logger = setup_logger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ <b>CS:GO Skin Tracker Bot</b>\n\n"
        "–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–∫–∏–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üõí –ö—É–ø–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞.\n\n"
        "Steam Partner: " + STEAM_PARTNER + "\n"
        "Steam Token: " + STEAM_TOKEN[:3] + "***",
        parse_mode="HTML"
    )


async def handle_purchase_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
    query = update.callback_query
    
    try:
        await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–∫—É–ø–∫—É...")
        
        callback_data = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: '{callback_data}'")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞
        item_id = extract_item_id(callback_data, context)
        
        if item_id is None:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–µ–¥–º–µ—Ç–∞\n"
                f"–î–∞–Ω–Ω—ã–µ: {callback_data}"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        purchase_data = context.bot_data.get('purchase_data', {}).get(str(item_id), {})
        price = purchase_data.get('price', 0)
        
        logger.info(f"–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ID: {item_id}, —Ü–µ–Ω–∞: ${price}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚è≥ <b>–ü–æ–∫—É–ø–∞—é –ø—Ä–µ–¥–º–µ—Ç</b>\n\n"
            f"ID: {item_id}\n"
            f"–¶–µ–Ω–∞: ${price}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        await process_purchase(query, item_id, price, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        import traceback
        traceback.print_exc()
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass


def extract_item_id(callback_data: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data"""
    if not callback_data:
        return None
    
    # –°–ø–æ—Å–æ–± 1: —Ñ–æ—Ä–º–∞—Ç buy_ID
    if callback_data.startswith("buy_"):
        try:
            return int(callback_data.replace("buy_", ""))
        except ValueError:
            pass
    
    # –°–ø–æ—Å–æ–± 2: –ø–æ–∏—Å–∫ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'purchase_data' in context.bot_data:
        for saved_id in context.bot_data['purchase_data'].keys():
            if saved_id in callback_data or callback_data in f"buy_{saved_id}":
                return int(saved_id)
    
    # –°–ø–æ—Å–æ–± 3: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–µ–ª
    numbers = re.findall(r'\d+', callback_data)
    if numbers:
        return int(numbers[0])
    
    return None


async def process_purchase(query, item_id: int, price: float, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏"""
    purchaser = SkinPurchaser()
    
    try:
        result = await purchaser.buy_skin(item_id, max_price=price * 1.1 if price else None)
        
        if result:
            purchase_id = result.get('purchase_id')
            skins = result.get('skins', [])
            
            if skins:
                skin = skins[0]
                status_text = (
                    f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                    f"Purchase ID: {purchase_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {skin.get('name')}\n"
                    f"–¶–µ–Ω–∞: USD: {skin.get('price')}\n"
		    f"      RUB: CurrencyRates().convert('USD', 'RUB', skin.get('price')) \n"
                    f"      CNY: CurrencyRates().convert('USD', 'CNY', skin.get('price')) \n"
		    f"–°—Ç–∞—Ç—É—Å: {skin.get('status')}\n\n"
                    f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ç—Ä–µ–π–¥ –≤ Steam!"
                )
            else:
                status_text = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {purchase_id}"
                
            await query.edit_message_text(status_text, parse_mode="HTML")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'purchase_data' in context.bot_data and str(item_id) in context.bot_data['purchase_data']:
                del context.bot_data['purchase_data'][str(item_id)]
                
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: {str(e)[:200]}",
            parse_mode="HTML"
        )
