import asyncio
import aiohttp
from centrifuge import Client, SubscriptionEventHandler, ClientEventHandler
from centrifuge import PublicationContext, ConnectedContext, DisconnectedContext
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime, timedelta
import logging
import json
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_KEY = "4e4c7ae1-9e45-4ee2-aef8-b8029f3cb97f"
TELEGRAM_TOKEN = "7726727524:AAEf82GMHiwXRfJkeZdH-t1Qlk5KOrOYc_c"
TELEGRAM_CHAT_ID = "758884131"

STEAM_PARTNER = "1057958433"  # –¢–≤–æ–π partner –∏–∑ Trade URL
STEAM_TOKEN = "0KqicsOy"      # –¢–≤–æ–π token –∏–∑ Trade URL

FLOAT_RANGES = [
    (0.00, 0.01),
    (0.07, 0.071),
    (0.99, 1.00)
]
STICKER_KEYWORDS = [
    "Howling Dawn",
    "Windged Defuser",
    "Crown (Foil)",
    "2013",
    "Katowice 2014",
    "Katowice 2015",
    "(Holo) | Cologne 2016",
    "(Foil) | Cologne 2016",
    "(Holo) | Atlanta 2017",
    "(Foil) | Atlanta 2017",
    "(Holo) | Boston 2018",
    "(Foil) | Boston 2018"
    # "(Holo) | Katowice 2019",
    # "(Foil) | Katowice 2019"
]
CHARM_KEYWORDS = [
    "Die-cast",
    "Semi-Precious",
    "Hot Howl",
    "Diamond Dog",
    "Hot Wurst",
    "Baby Karat T",
    "Baby Karat CT"
]

HIGHLIGHT_KEYWORDS = [
    "Hightlight"
]

class SkinPurchaser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–æ–≤"""
    def __init__(self, api_key: str, partner: str, token: str):
        self.api_key = api_key
        self.partner = partner
        self.token = token
        self.headers = {"Authorization": f"Bearer {self.api_key}"}
        
    async def buy_skin(self, skin_id: int, max_price: Optional[float] = None) -> Dict[str, Any]:
        """–ü–æ–∫—É–ø–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∫–∏–Ω–∞"""
        url = "https://api.lis-skins.com/v1/market/buy"
        custom_id = f"tg_purchase_{skin_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{uuid.uuid4().hex[:8]}"
        
        data = {
            "ids": [skin_id],
            "partner": self.partner,
            "token": self.token,
            "custom_id": custom_id,
            "skip_unavailable": True
        }
        
        if max_price:
            data["max_price"] = max_price
            
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=self.headers, json=data) as response:
                if response.status in [200, 201]:
                    result = await response.json()
                    return result.get('data', result)
                else:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {error_text}")

class ConnectionMonitor(ClientEventHandler):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    async def on_connected(self, ctx: ConnectedContext) -> None:
        logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: client_id={ctx.client}, version={ctx.version}")
        
    async def on_disconnected(self, ctx: DisconnectedContext) -> None:
        logger.warning(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: code={ctx.code}, reason={ctx.reason}")

class CSGOSkinTracker:
    def __init__(self, telegram_app: Application):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.telegram_app = telegram_app
        self.client = None
        self.running = True
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 10
        self.reconnect_delay = 5
        self.last_event_time = datetime.now()
        self.heartbeat_task = None
        self.events_count = 0
        self.purchaser = SkinPurchaser(API_KEY, STEAM_PARTNER, STEAM_TOKEN)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–µ—à–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.sent_new_items = {}  # {item_id: timestamp}
        self.sent_sold_items = {}  # {item_id: timestamp}
        self.cache_cleanup_interval = 3600  # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

    async def send_alert(self, message: str, item_id: Optional[int] = None, price: Optional[float] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏"""
        try:
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å ID –ø—Ä–µ–¥–º–µ—Ç–∞
            if item_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è callback_data
                callback_data = f"buy_{item_id}"
                keyboard.append([InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=callback_data)])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞
                if not hasattr(self.telegram_app.bot_data, 'purchase_data'):
                    self.telegram_app.bot_data['purchase_data'] = {}
                self.telegram_app.bot_data['purchase_data'][str(item_id)] = {
                    "id": item_id,
                    "price": price,
                    "timestamp": datetime.now().isoformat()
                }
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await self.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    async def get_websocket_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket"""
        url = "https://api.lis-skins.com/v1/user/get-ws-token"
        headers = {"Authorization": f"Bearer {API_KEY}"}

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                response.raise_for_status()
                data = await response.json()
                return data['data']['token']

    def is_csgo_item(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ CS:GO"""
        return data.get('game_id') == 1

    async def heartbeat_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.running:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                time_since_last_event = datetime.now() - self.last_event_time
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.events_count}, "
                        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {time_since_last_event.seconds} —Å–µ–∫ –Ω–∞–∑–∞–¥")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                if time_since_last_event > timedelta(minutes=5):
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.running = False
                    break  # –í–∞–∂–Ω–æ! –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ heartbeat
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ heartbeat: {e}")

    async def cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞"""
        while self.running:
            try:
                await asyncio.sleep(self.cache_cleanup_interval)
                current_time = datetime.now()
                
                # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                cutoff_time = current_time - timedelta(hours=2)
                
                # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                self.sent_new_items = {
                    item_id: timestamp 
                    for item_id, timestamp in self.sent_new_items.items() 
                    if timestamp > cutoff_time
                }
                
                # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                self.sent_sold_items = {
                    item_id: timestamp 
                    for item_id, timestamp in self.sent_sold_items.items() 
                    if timestamp > cutoff_time
                }
                
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: –Ω–æ–≤—ã—Ö {len(self.sent_new_items)}, –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö {len(self.sent_sold_items)}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")

    class CSGOEventHandler(SubscriptionEventHandler):
        def __init__(self, tracker, float_ranges: List[Tuple[float, float]]):
            self.tracker = tracker
            self.float_ranges = float_ranges
            self.active_items = {}
            self.processing_lock = asyncio.Lock()

        async def on_subscribing(self, ctx) -> None:
            logger.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª...")

        async def on_subscribed(self, ctx) -> None:
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")
            # –û—á–∏—â–∞–µ–º active_items –ø—Ä–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            self.active_items.clear()

        async def on_unsubscribed(self, ctx) -> None:
            logger.warning(f"‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞: {ctx}")

        async def on_error(self, ctx) -> None:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {ctx}")

        async def on_publication(self, ctx: PublicationContext) -> None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            self.tracker.last_event_time = datetime.now()
            self.tracker.events_count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ 100-–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if self.tracker.events_count % 100 == 0:
                logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.tracker.events_count} —Å–æ–±—ã—Ç–∏–π")
            
            async with self.processing_lock:
                try:
                    data = ctx.pub.data
                    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    
                    if not self.tracker.is_csgo_item(data):
                        return
                        
                    event_type = data.get('event')
                    item_id = str(data['id'])

                    if event_type == 'obtained_skin_added':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
                        if item_id in self.tracker.sent_new_items:
                            time_diff = datetime.now() - self.tracker.sent_new_items[item_id]
                            if time_diff < timedelta(minutes=30):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
                                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}")
                                return
                        
                        self.active_items[item_id] = {
                            'appear_time': current_time,
                            'data': data
                        }
                        await self.process_new_item(data, current_time)
                        
                    elif event_type == 'obtained_skin_deleted':
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
                        if item_id in self.tracker.sent_sold_items:
                            time_diff = datetime.now() - self.tracker.sent_sold_items[item_id]
                            if time_diff < timedelta(minutes=30):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
                                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–¥–∞–∂–∏ {item_id}")
                                return
                        
                        if item_id in self.active_items:
                            item_data = self.active_items[item_id]
                            await self.process_sold_item(
                                item_data['data'], 
                                item_data['appear_time'], 
                                current_time
                            )
                            del self.active_items[item_id]
                        else:
                            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ active_items, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
                            logger.debug(f"–ü—Ä–µ–¥–º–µ—Ç {item_id} –ø—Ä–æ–¥–∞–Ω, –Ω–æ –Ω–µ –±—ã–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

        async def process_new_item(self, data: Dict[str, Any], appear_time: str):
            try:
                item_name = data.get('name', '')
                item_id = data.get('id')
                price = data.get('price')
                item_float = data.get('item_float')
                stickers = data.get('stickers', [])
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–µ–π—Å—ã
                if 'Case' in item_name:
                    return
                
                # –§–ª–∞–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
                matches_float = False
                found_stickers = []
                found_charms = []
                found_highlights = []
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º float –¥–∏–∞–ø–∞–∑–æ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä—É–∂–∏—è —Å float)
                if item_float is not None:
                    try:
                        skin_float = float(item_float)
                        for range_min, range_max in self.float_ranges:
                            if range_min <= skin_float <= range_max:
                                matches_float = True
                                break
                    except (ValueError, TypeError):
                        pass
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã/—á–∞—Ä–º—ã/highlights
                if stickers and len(stickers) > 0:
                    for sticker in stickers:
                        sticker_name = sticker.get('name', '')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä—ã
                        for keyword in STICKER_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_stickers.append({
                                    'name': sticker_name,
                                    'wear': sticker.get('wear', 0),
                                    'slot': sticker.get('slot', 0)
                                })
                                break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∞—Ä–º—ã
                        for keyword in CHARM_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_charms.append({
                                    'name': sticker_name,
                                    'wear': sticker.get('wear', 0),
                                    'slot': sticker.get('slot', 0)
                                })
                                break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞–π–ª–∞–π—Ç—ã
                        for keyword in HIGHLIGHT_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_highlights.append({
                                    'name': sticker_name,
                                    'slot': sticker.get('slot', 0)
                                })
                                break
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ª—é–±–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
                if matches_float or found_stickers or found_charms:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    reasons = []
                    
                    if matches_float:
                        reasons.append(f"‚úÖ Float: {float(item_float):.6f}")
                    
                    if found_stickers:
                        stickers_text = "\n".join([
                            f"  ‚Ä¢ {s['name']} (—Å–ª–æ—Ç {s['slot']}, –∏–∑–Ω–æ—Å: {s['wear']}%)"
                            for s in found_stickers
                        ])
                        reasons.append(f"üè∑ –°—Ç–∏–∫–µ—Ä—ã:\n{stickers_text}")
                    
                    if found_charms:
                        charms_text = "\n".join([
                            f"  ‚Ä¢ {c['name']} (—Å–ª–æ—Ç {c['slot']}, –∏–∑–Ω–æ—Å: {c['wear']}%)"
                            for c in found_charms
                        ])
                        reasons.append(f"üíé –ß–∞—Ä–º—ã:\n{charms_text}")

                    if found_highlights:
                        highlight_text = "\n".join([
                            f"  ‚Ä¢ {c['name']} (—Å–ª–æ—Ç {c['slot']})"
                            for c in found_highlights
                        ])
                        reasons.append(f"üíé –•–∞–π–ª–∞–π—Ç—ã:\n{highlight_text}")

                    
                    message = (
                        f"<b>üÜï –ù–û–í–´–ô –°–ö–ò–ù </b>\n"
                        f"‚è± –ü–æ—è–≤–∏–ª—Å—è: {appear_time}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item_name}\n"
                        f"–¶–µ–Ω–∞: ${price}\n"
                        f"Float: {float(item_float)}\n"
                        f"ID: {item_id}\n\n"
                        f"–ü—Ä–∏—á–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n" + "\n".join(reasons)
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if item_float:
                        message += f"\n\n–ü–∞—Ç—Ç–µ—Ä–Ω: {data.get('item_paint_index', 'N/A')}"
                        message += f"\nSeed: {data.get('item_paint_seed', 'N/A')}"
                    
                    logger.info(f"[NEW ITEM] {item_name} - Float: {item_float}, Stickers: {len(found_stickers)}, Charms: {len(found_charms)}")
                    await self.tracker.send_alert(message, item_id, price)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    self.tracker.sent_new_items[str(item_id)] = datetime.now()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")

        async def process_sold_item(self, data: Dict[str, Any], appear_time: str, sold_time: str):
            if 'Case' in data.get('name', ''):
                return
            
            try:
                item_name = data.get('name', '')
                item_id = data.get('id')
                item_float = data.get('item_float')
                stickers = data.get('stickers', [])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–º –∂–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                matches_float = False
                found_stickers = []
                found_charms = []
                found_highlights = []
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ float
                if item_float is not None:
                    try:
                        skin_float = float(item_float)
                        for range_min, range_max in self.float_ranges:
                            if range_min <= skin_float <= range_max:
                                matches_float = True
                                break
                    except (ValueError, TypeError):
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤/—á–∞—Ä–º–æ–≤
                if stickers and len(stickers) > 0:
                    for sticker in stickers:
                        sticker_name = sticker.get('name', '')
                        
                        for keyword in STICKER_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_stickers.append(sticker_name)
                                break
                        
                        for keyword in CHARM_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_charms.append(sticker_name)
                                break

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞–π–ª–∞–π—Ç—ã
                        for keyword in HIGHLIGHT_KEYWORDS:
                            if keyword.lower() in sticker_name.lower():
                                found_highlights.append(sticker_name)
                                break
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ª—é–±–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
                if matches_float or found_stickers or found_charms:
                    duration = self.calculate_duration(appear_time, sold_time)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    details = []
                    if matches_float:
                        details.append(f"Float: {float(item_float):.6f}")
                    if found_stickers:
                        details.append(f"–°—Ç–∏–∫–µ—Ä—ã: {', '.join(found_stickers)}")
                    if found_charms:
                        details.append(f"–ß–∞—Ä–º—ã: {', '.join(found_charms)}")
                    if found_highlights:
                        details.append(f"–•–∞–π–ª–∞–π—Ç—ã: {', '.join(found_highlights)}")
                    
                    message = (
                        f"üí∞ <b>–°–∫–∏–Ω –ø—Ä–æ–¥–∞–Ω</b>\n"
                        f"‚è± –ü–æ—è–≤–∏–ª—Å—è: {appear_time}\n"
                        f"üõí –ü—Ä–æ–¥–∞–Ω: {sold_time}\n"
                        f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {duration}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name', 'N/A')}\n"
                        f"–¶–µ–Ω–∞: ${data.get('price', 'N/A')}\n"
                        f"{chr(10).join(details)}\n"
                        f"ID: {data.get('id', 'N/A')}"
                    )
                    
                    logger.info(f"[SOLD] {data['name']} - {', '.join(details)}")
                    await self.tracker.send_alert(message)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                    self.tracker.sent_sold_items[str(item_id)] = datetime.now()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")

        def calculate_duration(self, start_time: str, end_time: str) -> str:
            try:
                fmt = "%Y-%m-%d %H:%M:%S"
                start = datetime.strptime(start_time, fmt)
                end = datetime.strptime(end_time, fmt)
                delta = end - start
                
                hours, remainder = divmod(delta.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)
                return f"{hours}—á {minutes}–º {seconds}—Å"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                return "N/A"

    async def connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
            token = await self.get_websocket_token()
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–±—ã—Ç–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.client = Client(
                "wss://ws.lis-skins.com/connection/websocket",
                token=token,
                events=ConnectionMonitor()
            )
            
            logger.info("üì° –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
            sub = self.client.new_subscription(
                "public:obtained-skins",
                events=self.CSGOEventHandler(self, FLOAT_RANGES)
            )
            
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            await self.client.connect()
            
            logger.info("üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª...")
            await sub.subscribe()
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket")
            self.reconnect_attempts = 0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.heartbeat_task:
                self.heartbeat_task.cancel()
            self.heartbeat_task = asyncio.create_task(self.heartbeat_monitor())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞
            self.cache_cleanup_task = asyncio.create_task(self.cleanup_cache())
            
            logger.info("üíì Heartbeat –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            
            # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            while self.running:
                await asyncio.sleep(1)
                
            logger.info("üîö –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            import traceback
            traceback.print_exc()
            raise
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º heartbeat –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            if self.heartbeat_task:
                self.heartbeat_task.cancel()
                
            # –û—Ç–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞
            if hasattr(self, 'cache_cleanup_task'):
                self.cache_cleanup_task.cancel()
                
            if self.client:
                try:
                    await self.client.disconnect()
                except:
                    pass
    
    async def track_skins(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞ CS:GO –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   API Key: {API_KEY[:10]}...")
        logger.info(f"   Steam Partner: {STEAM_PARTNER}")
        logger.info(f"   Float –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {FLOAT_RANGES}")
        logger.info(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(STICKER_KEYWORDS)} —à—Ç.")
        logger.info(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–∞—Ä–º–æ–≤: {len(CHARM_KEYWORDS)} —à—Ç.")
        
        while self.reconnect_attempts < self.max_reconnect_attempts:
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.reconnect_attempts + 1}/{self.max_reconnect_attempts}")
                self.running = True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await self.connect_and_subscribe()
                
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ connect_and_subscribe –∏–∑-–∑–∞ self.running = False
                # –∏ reconnect_attempts –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                if not self.running and self.reconnect_attempts < self.max_reconnect_attempts:
                    logger.info("üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.reconnect_attempts += 1
                    
                    if self.reconnect_attempts < self.max_reconnect_attempts:
                        delay = min(self.reconnect_delay * self.reconnect_attempts, 60)
                        logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(delay)
                        continue
                else:
                    # –ï—Å–ª–∏ running –≤—Å–µ –µ—â–µ True, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                    break
                    
            except Exception as e:
                self.reconnect_attempts += 1
                logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: {str(e)}")
                
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    delay = min(self.reconnect_delay * self.reconnect_attempts, 60)
                    logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                else:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    await self.send_alert("‚ùå <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
        
        logger.info("üîå –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.running = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞...")
        self.running = False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def handle_purchase_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
    query = update.callback_query
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ–∫—É–ø–∫—É...")
        
        # –ü–∞—Ä—Å–∏–º callback_data
        callback_data = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: '{callback_data}'")
        logger.info(f"–¢–∏–ø callback_data: {type(callback_data)}")
        logger.info(f"–î–ª–∏–Ω–∞ callback_data: {len(callback_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if not callback_data:
            logger.error("–ü—É—Å—Ç–æ–π callback_data")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è ID
        item_id = None
        
        # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç buy_ID
        if callback_data.startswith("buy_"):
            try:
                item_id = int(callback_data.replace("buy_", ""))
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID —Å–ø–æ—Å–æ–±–æ–º 1: {item_id}")
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID: {e}")
        
        # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–µ–∑–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if item_id is None and 'purchase_data' in context.bot_data:
            logger.info("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID: {list(context.bot_data['purchase_data'].keys())}")
            
            # –ò—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for saved_id in context.bot_data['purchase_data'].keys():
                if saved_id in callback_data or callback_data in f"buy_{saved_id}":
                    item_id = int(saved_id)
                    logger.info(f"–ù–∞–π–¥–µ–Ω ID –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {item_id}")
                    break
        
        # –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–∞ –∏–∑ callback_data
        if item_id is None:
            import re
            numbers = re.findall(r'\d+', callback_data)
            if numbers:
                item_id = int(numbers[0])
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω ID –∏–∑ —á–∏—Å–µ–ª: {item_id}")
        
        if item_id is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: '{callback_data}'")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–µ–¥–º–µ—Ç–∞\n"
                f"–î–∞–Ω–Ω—ã–µ: {callback_data}"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        purchase_data = context.bot_data.get('purchase_data', {}).get(str(item_id), {})
        price = purchase_data.get('price', 0)
        
        logger.info(f"–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ID: {item_id}, —Ü–µ–Ω–∞: ${price}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚è≥ <b>–ü–æ–∫—É–ø–∞—é –ø—Ä–µ–¥–º–µ—Ç</b>\n\n"
            f"ID: {item_id}\n"
            f"–¶–µ–Ω–∞: ${price}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        purchaser = SkinPurchaser(API_KEY, STEAM_PARTNER, STEAM_TOKEN)
        
        try:
            result = await purchaser.buy_skin(item_id, max_price=price * 1.1 if price else None)
            
            if result:
                purchase_id = result.get('purchase_id')
                skins = result.get('skins', [])
                
                if skins:
                    skin = skins[0]
                    status_text = (
                        f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                        f"Purchase ID: {purchase_id}\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {skin.get('name')}\n"
                        f"–¶–µ–Ω–∞: ${skin.get('price')}\n"
                        f"–°—Ç–∞—Ç—É—Å: {skin.get('status')}\n\n"
                        f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ç—Ä–µ–π–¥ –≤ Steam!"
                    )
                else:
                    status_text = f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID: {purchase_id}"
                    
                await query.edit_message_text(status_text, parse_mode="HTML")
                
                # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'purchase_data' in context.bot_data and str(item_id) in context.bot_data['purchase_data']:
                    del context.bot_data['purchase_data'][str(item_id)]
                    
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                
        except Exception as purchase_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {purchase_error}")
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ</b>\n\n"
                f"–î–µ—Ç–∞–ª–∏: {str(purchase_error)[:200]}",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        import traceback
        traceback.print_exc()
        try:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ <b>CS:GO Skin Tracker Bot</b>\n\n"
        "–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–∫–∏–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üõí –ö—É–ø–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞.\n\n"
        "Steam Partner: " + STEAM_PARTNER + "\n"
        "Steam Token: " + STEAM_TOKEN[:3] + "***",
        parse_mode="HTML"
    )


async def main():
    # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start_command))
    telegram_app.add_handler(CallbackQueryHandler(handle_purchase_callback))
    
    logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º telegram polling
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
    
    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    tracker = CSGOSkinTracker(telegram_app)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        await tracker.track_skins()
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        tracker.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
        tracker.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram
        await telegram_app.updater.stop()
        await telegram_app.stop()
        await telegram_app.shutdown()
        
        logger.info("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Ctrl+C
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()