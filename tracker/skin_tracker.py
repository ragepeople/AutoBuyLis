"""–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç—Ä–µ–∫–µ—Ä–∞ —Å–∫–∏–Ω–æ–≤"""
import asyncio
import aiohttp
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from centrifuge import Client, ClientEventHandler, ConnectedContext, DisconnectedContext
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application

from config import (
    API_KEY, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID,
    WS_URL, WS_TOKEN_URL, WS_CHANNEL,
    MAX_RECONNECT_ATTEMPTS, RECONNECT_DELAY,
    HEARTBEAT_INTERVAL, NO_EVENTS_TIMEOUT,
    CACHE_CLEANUP_INTERVAL, CACHE_ITEM_TTL,
    FLOAT_RANGES
)
from models.skin_purchaser import SkinPurchaser
from handlers.websocket_handler import CSGOEventHandler
from utils.logger import setup_logger

logger = setup_logger(__name__)


class ConnectionMonitor(ClientEventHandler):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    def __init__(self, tracker):
        self.tracker = tracker
    
    async def on_connected(self, ctx: ConnectedContext) -> None:
        logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: client_id={ctx.client}, version={ctx.version}")
        self.tracker.is_connected = True
        
    async def on_disconnected(self, ctx: DisconnectedContext) -> None:
        logger.warning(f"‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: code={ctx.code}, reason={ctx.reason}")
        self.tracker.is_connected = False
        
        # –ö–æ–¥—ã –æ—à–∏–±–æ–∫, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        reconnect_codes = [1, 3005, 3501, 1006]
        
        if ctx.code in reconnect_codes:
            logger.warning("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WebSocket")
            self.tracker.needs_reconnect = True
            self.tracker.running = False  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª


class CSGOSkinTracker:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç—Ä–µ–∫–µ—Ä–∞ CS:GO —Å–∫–∏–Ω–æ–≤"""
    
    def __init__(self, telegram_app: Application):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.telegram_app = telegram_app
        self.client = None
        self.running = True
        self.is_connected = False
        self.needs_reconnect = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = MAX_RECONNECT_ATTEMPTS
        self.reconnect_delay = RECONNECT_DELAY
        self.last_event_time = datetime.now()
        self.heartbeat_task = None
        self.events_count = 0
        self.purchaser = SkinPurchaser()
        
        # –ö–µ—à–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.sent_new_items = {}
        self.sent_sold_items = {}
        self.cache_cleanup_interval = CACHE_CLEANUP_INTERVAL

    async def send_alert(self, message: str, item_id: Optional[int] = None, 
                        price: Optional[float] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏"""
        try:
            keyboard = []
            
            if item_id:
                callback_data = f"buy_{item_id}"
                keyboard.append([InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=callback_data)])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–µ
                if not hasattr(self.telegram_app.bot_data, 'purchase_data'):
                    self.telegram_app.bot_data['purchase_data'] = {}
                    
                self.telegram_app.bot_data['purchase_data'][str(item_id)] = {
                    "id": item_id,
                    "price": price,
                    "timestamp": datetime.now().isoformat()
                }
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await self.bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=message,
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

    async def get_websocket_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket"""
        headers = {"Authorization": f"Bearer {API_KEY}"}

        async with aiohttp.ClientSession() as session:
            async with session.get(WS_TOKEN_URL, headers=headers) as response:
                response.raise_for_status()
                data = await response.json()
                return data['data']['token']

    def is_csgo_item(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ CS:GO"""
        return data.get('game_id') == 1

    async def heartbeat_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.running:
            try:
                await asyncio.sleep(HEARTBEAT_INTERVAL)
                
                time_since_last_event = datetime.now() - self.last_event_time
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.events_count}, "
                          f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {time_since_last_event.seconds} —Å–µ–∫ –Ω–∞–∑–∞–¥")
                
                if time_since_last_event > timedelta(seconds=NO_EVENTS_TIMEOUT):
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.running = False
                    break
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ heartbeat: {e}")

    async def cleanup_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞"""
        while self.running:
            try:
                await asyncio.sleep(self.cache_cleanup_interval)
                current_time = datetime.now()
                cutoff_time = current_time - timedelta(seconds=CACHE_ITEM_TTL)
                
                # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
                self.sent_new_items = {
                    item_id: timestamp 
                    for item_id, timestamp in self.sent_new_items.items() 
                    if timestamp > cutoff_time
                }
                
                self.sent_sold_items = {
                    item_id: timestamp 
                    for item_id, timestamp in self.sent_sold_items.items() 
                    if timestamp > cutoff_time
                }
                
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: –Ω–æ–≤—ã—Ö {len(self.sent_new_items)}, "
                          f"–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö {len(self.sent_sold_items)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")

    async def heartbeat_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.running:
            try:
                await asyncio.sleep(HEARTBEAT_INTERVAL)
                
                time_since_last_event = datetime.now() - self.last_event_time
                logger.info(f"üìä –°—Ç–∞—Ç—É—Å: –°–æ–±—ã—Ç–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.events_count}, "
                          f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ: {time_since_last_event.seconds} —Å–µ–∫ –Ω–∞–∑–∞–¥, "
                          f"–ü–æ–¥–∫–ª—é—á–µ–Ω: {self.is_connected}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
                if time_since_last_event > timedelta(seconds=NO_EVENTS_TIMEOUT) or not self.is_connected:
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.needs_reconnect = True
                    self.running = False
                    break
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ heartbeat: {e}")

    async def connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
            token = await self.get_websocket_token()
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            self.client = Client(
                WS_URL,
                token=token,
                events=ConnectionMonitor(self)  # –ü–µ—Ä–µ–¥–∞–µ–º self –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ tracker
            )
            
            logger.info("üì° –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
            sub = self.client.new_subscription(
                WS_CHANNEL,
                events=CSGOEventHandler(self, FLOAT_RANGES)
            )
            
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            await self.client.connect()

            await asyncio.sleep(0.5)
            
            logger.info("üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª...")
            await sub.subscribe()
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket")
            self.reconnect_attempts = 0
            self.is_connected = True
            self.needs_reconnect = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if self.heartbeat_task:
                self.heartbeat_task.cancel()
                try:
                    await self.heartbeat_task
                except asyncio.CancelledError:
                    pass
                    
            self.heartbeat_task = asyncio.create_task(self.heartbeat_monitor())
            
            self.cache_cleanup_task = asyncio.create_task(self.cleanup_cache())
            
            logger.info("üíì Heartbeat –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            
            # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            while self.running and self.is_connected and not self.needs_reconnect:
                await asyncio.sleep(1)
                
            logger.info("üîö –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            import traceback
            traceback.print_exc()
            self.is_connected = False
            raise
        finally:
            # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if self.heartbeat_task:
                self.heartbeat_task.cancel()
                try:
                    await self.heartbeat_task
                except asyncio.CancelledError:
                    pass
                
            if hasattr(self, 'cache_cleanup_task'):
                self.cache_cleanup_task.cancel()
                try:
                    await self.cache_cleanup_task
                except asyncio.CancelledError:
                    pass
                
            if self.client:
                try:
                    await self.client.disconnect()
                except:
                    pass
                self.client = None
    
    async def track_skins(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–∫–µ—Ä–∞ CS:GO –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._log_settings()
        
        while self.reconnect_attempts < self.max_reconnect_attempts:
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.reconnect_attempts + 1}/{self.max_reconnect_attempts}")
                self.running = True
                self.is_connected = False
                self.needs_reconnect = False
                
                await self.connect_and_subscribe()
                
                # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ connect_and_subscribe –∏–∑-–∑–∞ self.needs_reconnect
                if self.needs_reconnect:
                    logger.info("üì° –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.reconnect_attempts += 1
                    
                    if self.reconnect_attempts < self.max_reconnect_attempts:
                        delay = min(self.reconnect_delay * self.reconnect_attempts, 60)
                        logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(delay)
                        continue
                    else:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        await self.send_alert("‚ùå <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        break
                elif not self.running:
                    # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Ctrl+C)
                    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
                    break
                    
            except Exception as e:
                self.reconnect_attempts += 1
                logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: {str(e)}")
                
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    delay = min(self.reconnect_delay * self.reconnect_attempts, 60)
                    logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(delay)
                else:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    await self.send_alert("‚ùå <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
        
        logger.info("üîå –¢—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.running = False
        self.is_connected = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞...")
        self.running = False

    def _log_settings(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        from config import STICKER_KEYWORDS, CHARM_KEYWORDS
        
        logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   API Key: {API_KEY[:10]}...")
        logger.info(f"   Float –¥–∏–∞–ø–∞–∑–æ–Ω—ã: {FLOAT_RANGES}")
        logger.info(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(STICKER_KEYWORDS)} —à—Ç.")
        logger.info(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–∞—Ä–º–æ–≤: {len(CHARM_KEYWORDS)} —à—Ç.")